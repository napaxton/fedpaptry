unlist(strsplit("a.b.c", "."))
unlist(strsplit("a.b.c", "[.]"))
unlist(strsplit("a.b.c", ".", fixed = TRUE))
strReverse <- function(x)
sapply(lapply(strsplit(x, NULL), rev), paste, collapse = "")
strReverse(c("abc", "Statistics"))
a <- readLines(file.path(R.home("doc"),"AUTHORS"))[-(1:8)]
a <- a[(0:2)-length(a)]
(a <- sub(" .*","", a))
# and reverse them
strReverse(a)
## Note that final empty strings are not produced:
strsplit(paste(c("", "a", ""), collapse="#"), split="#")[[1]]
# [1] ""  "a"
## and also an empty string is only produced before a definite match:
strsplit("", " ")[[1]]    # character(0)
strsplit(" ", " ")[[1]]   # [1] ""
pattern <- character("FEDERALIST[. ]+No\\.\\s[0-9]       # start matching here on
# FEDERALIST No. #
# (note some have a
# . after FEDERALIST
#
.*?                              # anything (non-greedy)
#
# finally a lookahead match
# on next essay number or
# string at end of file
(?=((FEDERALIST[. ]+No\\.\\s[0-9]) |
(End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\
Federalist\\ Papers)) )
")
pattern <- character("FEDERALIST[. ]+No\\.\\s[0-9]
.*?
(?=((FEDERALIST[. ]+No\\.\\s[0-9]) |
(End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\
Federalist\\ Papers)) )
")
pattern <- as.character(FEDERALIST[. ]+No\\.\\s[0-9]
.*?
(?=((FEDERALIST[. ]+No\\.\\s[0-9]) |
(End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\
Federalist\\ Papers)) )  )
form <- y ~ a + b + c
as.character(form)  ## length 3
deparse(form)       ## like the input
pattern <- as.character(FEDERALIST[. ]+No\\.\\s[0-9]
.*?
(?=((FEDERALIST[. ]+No\\.\\s[0-9]) |
(End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\
Federalist\\ Papers)) )  )
pattern <- as.character(FEDERALIST[. ]+No\\.\\s[0-9])
pattern
pattern <- regexpr(FEDERALIST[. ]+No\\.\\s[0-9])
pattern <- "FEDERALIST[. ]+No\\.\\s[0-9]"
pattern
fedpap.chap <- strsplt(fullfed.lines, pattern)
fedpap.chap <- strsplit(fullfed.lines, pattern)
head(fedpap.chap)
pattern
fedpap.chap <- strsplit(fullfed.lines, "FEDERALIST[. ]+No\\.\\s[0-9]")
rm(fedpap.chap)
fedpap.chap <- strsplit(fullfed.lines, "FEDERALIST[. ]+No\\.\\s[0-9]")
fedpap.chap[1:150]
fedpap.chap <- Regexp_Tokenizer("FEDERALIST[. ]+No\\.\\s[0-9]",)
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
pattern <- "FEDERALIST[. ]+No\\.\\s[0-9].*?(?=((FEDERALIST[. ]+No\\.\\s[0-9]) | (End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers)) )"
str_detect(fedtext,pattern)
fullfed.unlist <- unlist(fullfed.lines)
head(fullfed.unlist)
typeof(fullfed.lines)
fullfed.unlist <- paste(fullfed.lines, sep="\n")
head(fullfed.unlist)
fullfed.unlist <- paste(fullfed.lines, sep="\n", collapse=" ")
head(fullfed.unlist)
str_detect(fullfed.unlist,pattern)
pattern
str_detect(fullfed.unlist,"FEDERALIST[. ]+No\\.\\s[0-9]")
str_detect(fullfed.unlist,"FEDERALIST[. ]+No\\.\\s[0-9].*?")
str_detect(fullfed.unlist,"(?=((FEDERALIST[. ]+No\\.\\s[0-9]) | (End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers)) )")
str_detect(fullfed.unlist,"(?=((FEDERALIST[. ]+No\\.\\s[0-9])))")
str_detect(fullfed.unlist,"(((FEDERALIST[. ]+No\\.\\s[0-9]) | (End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers)) )")
str_detect(fullfed.unlist,"((FEDERALIST[. ]+No\\.\\s[0-9]) | (End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers)) ")
str_detect(fullfed.unlist,"(FEDERALIST[. ]+No\\.\\s[0-9]) | (End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers) ")
str_detect(fullfed.unlist,"FEDERALIST[. ]+No\\.\\s[0-9].*?(FEDERALIST[. ]+No\\.\\s[0-9]) | (End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers)")
pattern <- "FEDERALIST[. ]+No\\.\\s[0-9].*?(FEDERALIST[. ]+No\\.\\s[0-9]) | (End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers)"
str_count(fullfed.unlist,pattern)
str_count(fullfed.unlist,"FEDERALIST[. ]+No\\.\\s[0-9]")
str_count(fullfed.unlist,"FEDERALIST[. ]+No\\.\\s[0-9].*?")
str_count(fullfed.unlist,"(FEDERALIST[. ]+No\\.\\s[0-9]) | (End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers)")
str_count(fullfed.unlist,"(FEDERALIST[. ]+No\\.\\s[0-9])|(End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers)")
pattern <- "FEDERALIST[. ]+No\\.\\s[0-9].*?(FEDERALIST[. ]+No\\.\\s[0-9])|(End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers)"
str_count(fedfull.unlist, pattern)
str_count(fullfed.unlist, pattern)
str_locate(fullfed.unlist, pattern)
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split(fruits, " and ")
library(stringr)
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split(fruits, " and ")
tr_split(fruits, " and ", n = 3)
str_split(fruits, " and ", n = 3)
str_split(fruits, " and ", n = 2)
str_split_fixed(fruits, " and ", 3)
hw <- "Hadley Wickham"
str_sub(hw, 1, 6)
str_sub(hw, end = 6)
str_sub(hw, 8, 14)
strings <- c(" 219 733 8965", "329-293-8753 ", "banana", "595 794 7569",
"387 287 6718", "apple", "233.398.9187  ", "482 952 3315",
"239 923 8115 and 842 566 4692", "Work: 579-499-7527", "$1000",
"Home: 543.355.3679")
phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
str_extract(strings, phone)
str_match(strings, phone)
str_extract_all(strings, phone)
str_match_all(strings, phone)
fedtext <- scan("~/Desktop/Fedpapers.txt", what="character", sep="\n")
startfed <- which(fedtext == "FEDERALIST. No. 1")
endfed <- which(fedtext == "Sciences.\"")
fullfed.lines <-  fedtext[startfed:endfed]
fedlist1 <- str_match(fullfed.lines, pattern="FEDERALIST[. ]+No\\.\\s[0-9]")
fedlist1
fedlist1 <- str_split(fullfed.lines, pattern="FEDERALIST[. ]+No\\.\\s[0-9]")
fedlist1
fedlist1 <- string_loc(fullfed.lines, pattern="FEDERALIST[. ]+No\\.\\s[0-9]")
fedlist1 <- str_loc(fullfed.lines, pattern="FEDERALIST[. ]+No\\.\\s[0-9]")
fedlist1 <- str_locate(fullfed.lines, pattern="FEDERALIST[. ]+No\\.\\s[0-9]")
View(fedlist1)
fedlist1 <- str_locate_all(fullfed.lines, pattern="FEDERALIST[. ]+No\\.\\s[0-9]")
fedlist1
fedlist1 <- str_locate(fullfed.lines, pattern="FEDERALIST[. ]+No\\.\\s[0-9]")
View(fedlist1)
longpattern <- "FEDERALIST[. ]+No\\.\\s[0-9].*?(FEDERALIST[. ]+No\\.\\s[0-9])|(End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers)"
fedlist1 <- str_locate(fullfed.lines, pattern=longpattern)
View(fedlist1)
fed.collapse <- str_c(fullfed.lines)
fed.collapse <- str_join(fullfed.lines)
fed.collapse <- str_c(fullfed.lines, collapse=T)
head(fed.collapse)
fed.collapse <- str_c(fullfed.lines, collapse="")
head(fed.collapse)
fed.collapse <- str_c(fullfed.lines, collapse=" ")
head(fed.collapse)
fedlist1 <- str_locate(fullfed.lines, pattern=longpattern)
View(fedlist1)
fedlist1 <- str_locate(fed.collapse, pattern=longpattern)
length(fed.collapse)
grep(longpattern,fed.collapse)
pattern <- "FEDERALIST[. ]+No\\.\\s[0-9]"
string_loc(fullfed.list, pattern)
str_locate(fullfed.list, pattern)
str_locate(fullfed.lines, pattern)
chap.positions.v <- grep("FEDERALIST[. ]+No\\.\\s[0-9]", fedtext)
last.position.v <-  grep("End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\
Federalist\\ Papers", fedtext)
chap.positions.v  <-  c(chap.positions.v , last.position.v)
chap.positions.v
length(chap.positions.v)
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
str_extract(shopping_list, "[a-z]{1,4}")
str_extract(shopping_list, "\\b[a-z]{1,4}\\b")
typeof(shopping_list)
typeof(fedtext)
str_extract_all(shopping_list, "[a-z]+")
fedtext <- scan("~/Desktop/Fedpapers.txt", what="character", sep="\n")
ed <- which(fedtext == "FEDERALIST. No. 1")
endfed <- which(fedtext == "Sciences.\"")
fullfed.lines <-  fedtext[startfed:endfed]
fullfed.lines <- unlist(fullfed.lines)
chap.positions.v <- grep("FEDERALIST[. ]+No\\.\\s[0-9]", fullfed.lines)
last.position.v <-  endfed #grep("End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\
#                Federalist\\ Papers", fedtext)
chap.positions.v  <-  c(chap.positions.v , last.position.v)
startfed <- which(fedtext == "FEDERALIST. No. 1")
endfed <- which(fedtext == "Sciences.\"")
fullfed.lines <-  fedtext[startfed:endfed]
fullfed.lines <- unlist(fullfed.lines)
chap.positions.v <- grep("FEDERALIST[. ]+No\\.\\s[0-9]", fullfed.lines)
last.position.v <-  endfed #grep("End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\
#                Federalist\\ Papers", fedtext)
chap.positions.v  <-  c(chap.positions.v , last.position.v)
fullfed.char <- str_c(fullfed.lines, collapse=" ")
library(stringr)
fullfed.char <- str_c(fullfed.lines, collapse=" ")
fullfed.ch.low <- tolower(fullfed.char)
longpattern <- "FEDERALIST[. ]+No\\.\\s[0-9].*?(FEDERALIST[. ]+No\\.\\s[0-9])|(End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\ Federalist\\ Papers)"
str_extract(fullfed.ch.low, pattern=longpattern)
patt <-"FEDERALIST[. ]+No\\.\\s[0-9].*?"
str_extract(fullfed.ch.low, pattern=patt)
pattern <- "FEDERALIST[. ]+No\\.\\s[0-9]"
str_extract(fullfed.ch.low, pattern=pattern)
str_extract(fullfed.char, pattern=longpattern)
chap.positions.v <- grep("FEDERALIST[. ]+No\\.\\s[0-9]", fullfed.lines)
last.position.v <-  endfed #grep("End\\ of\\ the\\ Project\\ Gutenberg\\ Etext\\ of\\ the\\
#                Federalist\\ Papers", fedtext)
chap.positions.v  <-  c(chap.positions.v , last.position.v)
str_split(fullfed.char,pattern=pattern) -> trialsplit
head(trialsplit)
str_split(fullfed.char,pattern=longpattern) -> trialsplit
str_split(fullfed.char,pattern=patt) -> trialsplit
trailsplit[10]
trialsplit[10]
trialsplit[1]
length(trialsplit)
names(trialsplit)
typeof(trialsplit)
length(trialsplit[1])
chap.contents.l <-list()
chap.contents.l <- str_split(fullfed.char,pattern=pattern)
rm(trialsplit)
length(chap.contents.l)
length(chap.contents.l[[1]])
chap.contents.l <-list()
length(chap.contents.l)
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
fruits
chap.contents.l <- str_split(fullfed.char,pattern=pattern)
i = 1
chap.contents.l[i] <- fullfed.lines[chap.positions.v[i]]:fullfed.lines[chap.positions.v[i+1]-1]
chap.positions.v[i]
fullfed.lines[chap.positions.v[i]]
i =2
fullfed.lines[chap.positions.v[i]]
fullfed.lines[chap.positions.v[i:i+1]]
fullfed.lines[chap.positions.v[i]:chap.positions.v[i+1]]
fullfed.lines[chap.positions.v[i]:chap.positions.v[i+1]-1]
fedpap.names.l <- list()
for (i in length(chap.contents.l)){
fedpap.names.l <- grep(pattern,chap.contents.l)
}
length(chap.contents.l
)
chap.contents.l <- strsplit(fullfed.char, pattern)
length(chap.contents.l)
fedpap.names.l <- list()
for (i in length(chap.contents.l[[1]])){
fedpap.names.l <- grep(pattern,chap.contents.l)
}
fedpap.names.l
for (i in length(chap.contents.l[[1]])){
fedpap.names.l <- str_extract(pattern,chap.contents.l)
}
for (i in length(chap.contents.l[[1]])){
fedpap.names.l <- str_extract(pattern,chap.contents.l[[1]])
}
chap.contents.l[[1]]
typeof(chap.contents.l[[1]])
typeof(chap.contents.l[[1,1]])
typeof(chap.contents.l[1,1])
typeof(chap.contents.l[1,2])
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data()
data()
data(ovid)
txt <- system.file("texts", "txt", package = "tm")
txt
(ovid <- VCorpus(DirSource(txt, encoding = "UTF-8"),                 +                  readerControl = list(language = "lat")))
(ovid <- VCorpus(DirSource(txt, encoding = "UTF-8"),                                   readerControl = list(language = "lat")))
(ovid <- VCorpus(DirSource(txt, encoding = "UTF-8"), readerControl = list(language = "lat")))
ovid
setwd("/Library/Frameworks/R.framework/Versions/3.2/Resources/library/tm/texts")
for (i in length(chap.positions.v)){
print(paste("Paper ", i, "begins at ", chap.positions.v[i], sep=""))
}
fedpap.names.l <- list()
for (i in 1:length(chap.contents.l){
fedpap.names.l <- str_extract(pattern,chap.contents.l)
}
for (i in 1:length(chap.positions.v)){
print(paste("Paper ", i, "begins at ", chap.positions.v[i], sep=""))
}
fedpap.names.l <- list()
for (i in 1:length(chap.contents.l)){
fedpap.names.l[i] <- str_extract(pattern,chap.contents.l[i])
}
i
fedpap.names.l[i] <- str_extract(pattern,chap.contents.l[i])
fedpap.names.l[i] <- str_extract(pattern,chap.contents.l[[i])
fedpap.names.l[i] <- str_extract(pattern,chap.contents.l[[i])
fedpap.names.l[i] <- str_extract(pattern,chap.contents.l[[i]])
fedpap.names.l[i] <- str_extract(pattern=pattern,chap.contents.l[[i]])
chap.contents.l[[i]]
}
source('~/.active-rstudio-document')
length(chap.positions.v)
i
i ==1
i =1
chap.contents.l <- list(length(chap.positions.v))
for (i in 1:length(chap.positions.v)){
if (i != length(chap.positions.v)){
chapter.start <- chap.positions.v[i]
chapter.end <- chap.positions.v[i+1]-1
chap.contents.l[i] <- fullfed.lines[chapter.start]:fullfed.lines[chapter.end]
}
}
fullfed.lines[chapter.start]:fullfed.lines[chapter.end]
chapter.start
chapter.end
fullfed.lines[1]:fullfed.lines[156]
fullfed.lines[chapter.start:chapter.end]
for (i in 1:length(chap.positions.v)){
if (i != length(chap.positions.v)){
chapter.start <- chap.positions.v[i]
chapter.end <- chap.positions.v[i+1]-1
chap.contents.l[i] <- fullfed.lines[chapter.start:chapter.end]
}
}
warnings()
for (i in 1:length(chap.positions.v)){
if (i != length(chap.positions.v)){
chapter.start <- chap.positions.v[i]
chapter.end <- chap.positions.v[i+1]-1
chap.contents.l[i] <- str_c(fullfed.lines[chapter.start:chapter.end], collapse=" ")
}
}
fedpap.names.l <- list()
for (i in 1:length(chap.contents.l)){
fedpap.names.l[i] <- str_extract(pattern=pattern,chap.contents.l[[i]])
}
fedpap.authors.l <- list()
auth.patt <- "(HAMILTON|JAY|MADISON)(\s(AND|OR)\s(MADISON))?"
fedpap.auth <- lapply(chap.contents.l, str_extract(pattern=auth.patt,chap.contents.l[[i]]))
auth.patt <- "(HAMILTON|JAY|MADISON)(\\s(AND|OR)\\s(MADISON))?"
fedpap.auth <- lapply(chap.contents.l, str_extract(pattern=auth.patt,chap.contents.l[[i]]))
str_extract(pattern=auth.patt,chap.contents.l[[i]])
fedpap.auth <- lapply(chap.contents.l, str_extract(pattern=auth.patt,chap.contents.l))
match.fun(str_extract)
fedpap.auth <- lapply(chap.contents.l, str_extract, pattern=auth.patt, string= chap.contents.l))
fedpap.auth <- lapply(chap.contents.l, str_extract, pattern=auth.patt, string= chap.contents.l)
lapply(chap.contents.l, str_extract, pattern=auth.patt, string= chap.contents.l)
lapply(chap.contents.l, str_extract, pattern=auth.patt, string=chap.contents.l)
fedpap.auth <- lapply(chap.contents.l, grep, pattern=auth.patt)
setwd("~/Documents/R")
install.packages("Rcmdr")
wordlibs <- "tm, stringr")
library(wordlibs)
wordlibs <- "tm, stringr"
library(wordlibs)
pkgs <- c(tm, stringr)
library(pkgs)
library(Rcmdr)
rm(ovid)
rm(txt)
rm(wordlibs)
rm(i)
library(tm)
?tm
getSources()
feds <- VCorpus(DataframeSource(chap.contents.l))
feds <- as.VCorpus(DataframeSource(chap.contents.l))
dim(chap.contents.l)
chap.contents.df <- as.data.frame(chap.contents.l)
View(chap.contents.df)
chap.contents.df <- as.data.frame(chap.contents.l, strings=F)
View(chap.contents.df)
rm(chap.contents.df)
chap.contents.df <- data.frame()
chap.contents.df <- rbind(chap.contents.l,fedpap.names.l)
rm(chap.contents.df)
chap.contents.df <- cbind(chap.contents.l,fedpap.names.l)
chap.contents.df <- rbind(chap.contents.l,fedpap.names.l)
chap.contents.df <- c(chap.contents.l,fedpap.names.l)
cbind(fedpap.names.l,fedpap.authors.l)
cbind(fedpap.names.l,fedpap.auth)
cbind(fedpap.names.l,chap.contents.l)
cbind(fedpap.names.l,chap.contents.l) -> thing1
thing1 <- as.data.frame(thing1)
fedpap.names.l <- list()
for (i in 1:length(chap.contents.l)){
fedpap.names.l[i] <- str_extract(pattern=pattern,chap.contents.l[[i]])
}
library(stringr)
fedpap.names.l <- list()
for (i in 1:length(chap.contents.l)){
fedpap.names.l[i] <- str_extract(pattern=pattern,chap.contents.l[[i]])
}
pattern <- "FEDERALIST[. ]+No\\.\\s[0-9]{1,2}"
fedpap.names.l <- list()
for (i in 1:length(chap.contents.l)){
fedpap.names.l[i] <- str_extract(pattern=pattern,chap.contents.l[[i]])
}
fedpap.authors.l <- list()
auth.patt <- "(HAMILTON|JAY|MADISON)(\\s(AND|OR)\\s(MADISON))?"
fedpap.auth <- lapply(chap.contents.l, grep, pattern=auth.patt)
fedpap.auth <- lapply(chap.contents.l, str_extract, pattern=auth.patt)
library(c("tm", "stringr"))
library(c("tm, stringr"))
library(pkg=c("tm, stringr"))
library(pkg=c("tm", "stringr"))
library(pkg=("tm", "stringr")
library(pkg=(c("tm", "stringr")
)
)
dput(mean, "foo")
bar <- dget("foo")
bar
typeof(bar)
rm(bar)
i
i = 45
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
cat(chap.contents.l[i])
cat(chap.contents.l[[i]])
dput(chap.contents.l[[i]])
cat(chap.contents.l[i], file=paste("fedpap", i, ".txt"))
cat(chap.contents.l[[i], file=paste("fedpap", i, ".txt"))
cat(chap.contents.l[[i] , file=paste("fedpap", i, ".txt"))
cat(chap.contents.l[[i]] , file=paste("fedpap", i, ".txt"))
cat(chap.contents.l[[i]], file=paste("fedpap", i, ".txt"), sep="")
cat(chap.contents.l[[i]], file=paste("fedpap", i, ".txt"), sep="")
cat(chap.contents.l[[i]] , file=paste0("fedpap", i, ".txt"))
cat(chap.contents.l[[i]] , file=paste0("fedpap", i, ".txt"))
for (i in 1:length(chap.contents.l)){
while (i <= 70)
cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
if (i == 71)
cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
else cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
}
setwd("~/Documents/R/fedpaptry")
for (i in 1:length(chap.contents.l)){
while (i <= 70)
cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
if (i == 71)
cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
else cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
}
for (i in 1:length(chap.contents.l)){
while (i <= 70)
cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
}
for (i in 1:length(chap.contents.l)){
if (i <= 70)
cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
}
for (i in 1:length(chap.contents.l)){
if (i <= 70)
cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
else if (i == 71)
cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
}
for (i in 1:length(chap.contents.l)){
if (i <= 70)
cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
else if (i == 71)
cat(chap.contents.l[[i]], file=paste0("fedpap", "70b", ".txt") )
else cat(chap.contents.l[[i]], file=paste0("fedpap", i+1, ".txt") )
}
for (i in 1:length(chap.contents.l)){
if (i <= 70)
cat(chap.contents.l[[i]], file=paste0("fedpap", i, ".txt") )
else if (i == 71)
cat(chap.contents.l[[i]], file=paste0("fedpap", "70b", ".txt") )
else cat(chap.contents.l[[i]], file=paste0("fedpap", i-1, ".txt") )
}
ed
rm(ed)
rm(iter)
View(thing1)
rm(thing1)
load("~/Documents/R/fedpaptry/WorkingFedPap.RData")
install.packages(c("Amelia", "ape", "car", "cshapes", "curl", "Deducer", "DiagrammeR", "digest", "effects", "ggplot2", "Hmisc", "htmltools", "httr", "jsonlite", "knitr", "maps", "maptools", "MASS", "Matrix", "mgcv", "multcomp", "mvtnorm", "nlme", "nnet", "packrat", "plm", "plotrix", "R6", "raster", "Rcmdr", "Rcpp", "RcppArmadillo", "RcppEigen", "rgdal", "rgl", "rJava", "rmarkdown", "rstudioapi", "sp", "stylo", "TH.data", "visNetwork", "xtable", "Zelig"))
?tolower
fed.words.l <- strsplit(fullfed.ch.low, "\\W")
fed.words.v <- unlist(fed.words.l)
not.blanks.v <- which(fed.words.v!="")
fed.words.v <- fed.words.v[not.blanks.v]
total.words.v <- length(fed.words.v)
fed.freqs.t <- table(fed.words.v)
fed.freqs.t
sort.fed.freqs.t <- fed.freqs.t, decreasing=T)
sort.fed.freqs.t <- sort(fed.freqs.t, decreasing=T)
plot(sort.fed.freqs.t)
head(sort.fed.freqs.t)
sort.fed.freqs.t[1:25]
sor.fed.freqs.rel.t <- 100*(sort.fed.freqs.t/sum(sort.fed.freqs.t))
sort.fed.freqs.rel.t <- 100*(sort.fed.freqs.t/sum(sort.fed.freqs.t))
plot(sort.fed.freqs.rel.t[1:15], type="b",
xlab="Top Fifteeen Words", ylab="Percentage of Full text",
axis(1, 1:15, labels=names(sort.fed.freqs.rel.t[1:15])))
names(sort.fed.freqs.rel.t[1:15]
)
plot(sort.fed.freqs.rel.t[1:15], type="b",
xlab="Top Fifteeen Words", ylab="Percentage of Full text",
axis(1, 1:15, labels=names(sort.fed.freqs.rel.t [1:15])))
plot(sort.fed.freqs.rel.t[1:15], type="b")
plot(sort.fed.freqs.rel.t[1:15], type="b",
xlab="Top Fifteeen Words", ylab="Percentage of Full text")
axis(1, 1:15, labels=names(sort.fed.freqs.rel.t [1:15]))
plot(sort.fed.freqs.rel.t[1:15], type="b",
xlab="Top Fifteeen Words", ylab="Percentage of Full text", xaxt="n")
axis(1, 1:15, labels=names(sort.fed.freqs.rel.t [1:15]))
sort.fed.freqs.t[1:100]
library(tm)
fedpap.corp.1 <- VCorpus(VectorSource(fullfed.ch.low))
fedpap.corp.1
fedpap.corp.1 <- VCorpus(DirSource(directory = "~/Documents/R/fedpaptry"))
fedpap.corp.1
